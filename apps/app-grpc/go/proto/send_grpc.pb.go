// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.13.0
// source: proto/send.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SendService_Send_FullMethodName            = "/send.SendService/Send"
	SendService_SendWithTimeout_FullMethodName = "/send.SendService/SendWithTimeout"
	SendService_SendAll_FullMethodName         = "/send.SendService/SendAll"
)

// SendServiceClient is the client API for SendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The send service definition.
type SendServiceClient interface {
	// Sends data with ID and bytes.
	Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Sends data with ID, bytes and a timeout.
	SendWithTimeout(ctx context.Context, in *SendWithTimeoutRequest, opts ...grpc.CallOption) (*SendResponse, error)
	// Streaming version of Send.
	SendAll(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendRequest, SendResponse], error)
}

type sendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendServiceClient(cc grpc.ClientConnInterface) SendServiceClient {
	return &sendServiceClient{cc}
}

func (c *sendServiceClient) Send(ctx context.Context, in *SendRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, SendService_Send_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SendWithTimeout(ctx context.Context, in *SendWithTimeoutRequest, opts ...grpc.CallOption) (*SendResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendResponse)
	err := c.cc.Invoke(ctx, SendService_SendWithTimeout_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sendServiceClient) SendAll(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SendRequest, SendResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &SendService_ServiceDesc.Streams[0], SendService_SendAll_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendRequest, SendResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SendService_SendAllClient = grpc.BidiStreamingClient[SendRequest, SendResponse]

// SendServiceServer is the server API for SendService service.
// All implementations must embed UnimplementedSendServiceServer
// for forward compatibility.
//
// The send service definition.
type SendServiceServer interface {
	// Sends data with ID and bytes.
	Send(context.Context, *SendRequest) (*SendResponse, error)
	// Sends data with ID, bytes and a timeout.
	SendWithTimeout(context.Context, *SendWithTimeoutRequest) (*SendResponse, error)
	// Streaming version of Send.
	SendAll(grpc.BidiStreamingServer[SendRequest, SendResponse]) error
	mustEmbedUnimplementedSendServiceServer()
}

// UnimplementedSendServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSendServiceServer struct{}

func (UnimplementedSendServiceServer) Send(context.Context, *SendRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedSendServiceServer) SendWithTimeout(context.Context, *SendWithTimeoutRequest) (*SendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendWithTimeout not implemented")
}
func (UnimplementedSendServiceServer) SendAll(grpc.BidiStreamingServer[SendRequest, SendResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (UnimplementedSendServiceServer) mustEmbedUnimplementedSendServiceServer() {}
func (UnimplementedSendServiceServer) testEmbeddedByValue()                     {}

// UnsafeSendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SendServiceServer will
// result in compilation errors.
type UnsafeSendServiceServer interface {
	mustEmbedUnimplementedSendServiceServer()
}

func RegisterSendServiceServer(s grpc.ServiceRegistrar, srv SendServiceServer) {
	// If the following call pancis, it indicates UnimplementedSendServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SendService_ServiceDesc, srv)
}

func _SendService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_Send_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).Send(ctx, req.(*SendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SendWithTimeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendWithTimeoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendServiceServer).SendWithTimeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SendService_SendWithTimeout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendServiceServer).SendWithTimeout(ctx, req.(*SendWithTimeoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SendService_SendAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SendServiceServer).SendAll(&grpc.GenericServerStream[SendRequest, SendResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type SendService_SendAllServer = grpc.BidiStreamingServer[SendRequest, SendResponse]

// SendService_ServiceDesc is the grpc.ServiceDesc for SendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "send.SendService",
	HandlerType: (*SendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SendService_Send_Handler,
		},
		{
			MethodName: "SendWithTimeout",
			Handler:    _SendService_SendWithTimeout_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendAll",
			Handler:       _SendService_SendAll_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/send.proto",
}
